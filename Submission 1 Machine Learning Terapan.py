# -*- coding: utf-8 -*-
"""diabetes_ml.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZJ1BtI9w7NMrVL334cbiwpZJuUJGNoUf

1. Import Library
"""

# Commented out IPython magic to ensure Python compatibility.
#Library processing data
from google.colab import files
import numpy as np
import pandas as pd
from sklearn.utils import resample
from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder

#Library vizualitation data
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

#Library model
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix

"""2. Connect Collab To Google Drive"""

# connect to drive
from google.colab import drive
drive.mount('/content/drive')

"""3. Data Understanding"""

# Load dataset using pandas
df = pd.read_csv("/content/drive/MyDrive/Dataset/diabetes_prediction_dataset.csv")
df.head()

# Get info from dataset
df.info()

# Count null values
df.isna().sum()

# Info shape from dataset
df.shape

# describe basic statistic from dataset
df.describe()

"""4. Exploratory Data Analysis"""

# Split feature dataset to categorical and numerical
categorical_features = ['gender', 'hypertension', 'heart_disease', 'smoking_history', 'diabetes']
numerical_features = ['age', 'bmi', 'HbA1c_level', 'blood_glucose_level']

"""4.1 Categorical Visualization"""

feature_gender = categorical_features[0]
count = df[feature_gender].value_counts()
percent = 100*df[feature_gender].value_counts(normalize=True)
data = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(data)
count.plot(kind='bar', title=feature_gender,color='skyblue');

feature_hyper = categorical_features[1]
count = df[feature_hyper].value_counts()
percent = 100*df[feature_hyper].value_counts(normalize=True)
data = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(data)
count.plot(kind='bar', title=feature_hyper, color='skyblue');

feature_heart = categorical_features[2]
count = df[feature_heart].value_counts()
percent = 100*df[feature_heart].value_counts(normalize=True)
data = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(data)
count.plot(kind='bar', title=feature_heart, color='skyblue');

feature_smoke = categorical_features[3]
count = df[feature_smoke].value_counts()
percent = 100*df[feature_smoke].value_counts(normalize=True)
data = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(data)
count.plot(kind='bar', title=feature_smoke, color='skyblue');

"""4.2 Numerical Visualization"""

df_numerical = df[['age', 'bmi', 'HbA1c_level', 'blood_glucose_level']]
df_numerical.hist(bins=15, figsize=(15,10),color='skyblue', edgecolor='black')
plt.show()

"""4.3 Correlation Feature"""

df_numerical = df[['age', 'bmi', 'HbA1c_level', 'blood_glucose_level','diabetes']]
plt.figure(figsize = (10,8))
sns.heatmap(df_numerical.corr(), annot = True,cmap='Blues')

"""5. Data Processing

5.1 Categorical Encoding
"""

print("Unique Values for Gender", df['gender'].unique())
print("Unique Values for smoking_history", df['smoking_history'].unique())

encoding_gender = {"gender":     {"Male": 0, "Female": 1, "Other": 2}}
df.replace(encoding_gender, inplace=True)

encoding_smoke = {"smoking_history":     {"never": 0, "No Info": 1, "current": 2, "former": 3, "ever": 4, "not current": 5}}
df.replace(encoding_smoke, inplace=True)

"""5.2 Imbalance Label"""

df.diabetes.value_counts()

no_diabetes  = df[df['diabetes']==0]
diabetes = df[df['diabetes']==1]

df_minority_resampled = resample(diabetes, replace = True, n_samples = 91500)

df = pd.concat([no_diabetes, df_minority_resampled])

df.diabetes.value_counts()

"""5.3 Split train and test"""

x = df.drop('diabetes',axis=1)
y = df['diabetes']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)
print(x_train.shape)
print(x_test.shape)

"""5.4 Normalization Dataset"""

sc=StandardScaler()

x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

"""6. Create and Evaluate Model"""

RandomForest = RandomForestClassifier(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RandomForest.fit(x_train, y_train)

pred = RandomForest.predict(x_test)
accuracy_score(y_test, pred)

cr = classification_report(y_test, pred, output_dict=True)
pd.DataFrame(cr).transpose()

cm = confusion_matrix(y_test,pred)
sns.heatmap(cm,annot=True,fmt="d")

Knn = KNeighborsClassifier(n_neighbors=10)
Knn.fit(x_train, y_train)

pred = Knn.predict(x_test)

accuracy_score(y_test, pred)

cr = classification_report(y_test, pred, output_dict=True)
pd.DataFrame(cr).transpose()

cm = confusion_matrix(y_test,pred)
sns.heatmap(cm,annot=True,fmt="d")